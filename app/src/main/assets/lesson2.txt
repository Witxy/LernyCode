text%№%Базовым строительным блоком программы являются инструкции (statement). Инструкция представляет некоторое действие, например, арифметическую операцию, вызов метода, объявление переменной и присвоение ей значения. В конце каждой инструкции в C# ставится точка с запятой (;). Данный знак указывает компилятору на конец инструкции. Например:
code%№%Console.WriteLine("Привет");
text%№%Данная строка представляет вызов метода Console.WriteLine, который выводит на консоль строку. В данном случае вызов метода является инструкцией и поэтому завершается точкой с запятой.\n\nНабор инструкций может объединяться в блок кода. Блок кода заключается в фигурные скобки, а инструкции помещаются между открывающей и закрывающей фигурными скобками:
code%№%{ \n    Console.WriteLine("Привет"); \n    Console.WriteLine("Добро пожаловать в C#"); \n}
text%№%В данном блоке кода две инструкции, которые выводят на консоль определенную строку.\n\nОдни блоки кода могут содержать другие блоки:
code%№%{ \n Console.WriteLine("Первый блок"); \n  { \n    Console.WriteLine("Второй блок"); \n  } \n }
page
text%№%В какие скобки заключаются блоки кода?
test%№%В квадратные скобки|\|В круглые скобки|\|В фигурные скобки|\|Блоки кода не выделяются скобками|\|3
page
text%№%Точкой входа в программу на языке C# является метод Main. При создании проекта консольного приложения в Visual Studio, например, создается следующий метод Main:
code%№%{ \n class Program \n { \n    static void Main(string[] args) \n  { \n     // здесь помещаются выполняемые инструкции \n  } \n }
text%№%По умолчанию метод Main размещается в классе Program. Название класса может быть любым. Но метод Main является обязательной частью консольного приложения. Если мы изменим его название, то программа не скомпилируется.\n\nПо сути и класс, и метод представляют своего рода блок кода: блок метода помещается в блок класса. Внутри блока метода Main располагаются выполняемые в программе инструкции.
page
text%№%C# является регистрозависимым языком. Это значит, в зависимости от регистра символов какое-то определенные названия может представлять разные классы, методы, переменные и т.д. Например, название обязательного метода Main начинается именно с большой буквы: "Main". Если мы назовем метод "main", то программа не скомпилируется, так как метод, который представляет стартовую точку в приложении, обязательно должен называться "Main", а не "main" или "MAIN".
page
text%№%Для хранения данных в программе применяются переменные. Переменная представляет именнованную область памяти, в которой хранится значение определенного типа. Переменная имеет тип, имя и значение. Тип определяет, какого рода информацию может хранить переменная.\n\n Перед использованием любую переменную надо определить. Синтаксис определения переменной выглядит следующим образом:
code%№% тип имя_переменной;
text%№%Вначале идет тип переменной, потом ее имя. В качестве имени переменной может выступать любое произвольное название, которое удовлетворяет следующим требованиям:\n\n • имя может содержать любые цифры, буквы и символ подчеркивания, при этом первый символ в имени должен быть буквой или символом подчеркивания\n\n • в имени не должно быть знаков пунктуации и пробелов \n\n • имя не может быть ключевым словом языка C#. Таких слов не так много, и при работе в Visual Studio среда разработки подсвечивает ключевые слова синим цветом.\n\n Хотя имя переменой может быть любым, но следует давать переменным описательные имена, которые будут говорить об их предназначении \n\n Например, определим простейшую переменную:
code%№%string name;
text%№%В данном случае определена переменная name, которая имеет тип string. то есть переменная представляет строку. Поскольку определение переменной представляет собой инструкцию, то после него ставится точка с запятой.\n\nПри этом следует учитывать, что C# является регистрозависимым языком, поэтому следующие два определения переменных будут представлять две разные переменные:
code%№% string name; \n string Name;
text%№%После определения переменной можно присвоить некоторое значение:
code%№% string name; \n name = "Tom";
text%№%Так как переменная name представляет тип string, то есть строку, то мы можем присвоить ей строку в двойных кавычках. Причем переменной можно присвоить только то значение, которое соответствует ее типу.\n\nВ дальнейшем с помощью имени переменной мы сможем обращаться к той области памяти, в которой хранится ее значение.\n\nТакже мы можем сразу при определении присвоить переменной значение. Данный прием называется инициализацией:
code%№% string name = "Tom";
page
text%№%Определите правильное название переменной для хранения имени
test%№%1Name|\|jfsndfmds|\|my name|\|name|\|4
page
text%№%Отличительной чертой переменных является то, что в программе можно многократно менять их значение. Например, создадим небольшую программу, в которой определим переменную, поменяем ее значение и выведем его на консоль:
code%№%{ \n using System; \n \n namespace HelloApp \n { \n   class Program \n   { \n     static void Main(string[] args) \n     { \n       string name = "Tom";  \n        Console.WriteLine(name);    // Tom \n \n       name = "Bob";  // меняем значение переменной \n       Console.WriteLine(name);  // Bob \n \n       Console.Read(); \n     } \n   } \n }
out%№% Tom \n Bob
