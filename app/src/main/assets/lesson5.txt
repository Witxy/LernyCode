text%№%
text%№%Консольный вывод \nДля вывода информации на консоль мы уже использовали встроенный метод Console.WriteLine. То есть, если мы хотим вывести некоторую информацию на консоль, то нам надо передать ее в метод Console.WriteLine:
code%№%using System;\n\n namespace HelloApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string hello = "Привет мир";\n            Console.WriteLine(hello);\n            Console.WriteLine("Добро пожаловать в C#!");\n            Console.WriteLine("Пока мир...");\n            Console.WriteLine(24.5);\n\n                         Console.ReadKey();\n        }\n    }\n}\n
out%№%Привет мир!\nДобро пожаловать в C#!\nПока мир...\n24,5
page
text%№%Нередко возникает необходимость вывести на консоль в одной строке значения сразу нескольких переменных. В этом случае мы можем использовать прием, который называется интерполяцией:
code%№%using System;\n\n namespace HelloApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string name = "Tom";\n            int age = 34;\n            double height = 1.7;\n            Console.WriteLine($"Имя: {name}  Возраст: {age}  Рост: {height}м");\n\n             Console.ReadKey();\n        }\n    }\n}\n
text%№%Для встраивания отдельных значений в выводимую на консоль строку используются фигурные скобки, в которые заключается встраиваемое значение. Это можем значение переменной ({name}) или более сложное выражение (например, операция сложения {4 + 7}). А перед всей строкой ставится знак доллара $. \nПри выводе на консоль вместо помещенных в фигурные скобки выражений будут выводиться их значения:
out%№%Имя: Tom  Возраст: 34  Рост: 1,7м
page
text%№%Есть другой способ вывода на консоль сразу нескольких значений:
code%№%using System;\n\n namespace HelloApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string name = "Tom";\n            int age = 34;\n            double height = 1.7;\n            Console.WriteLine("Имя: {0}  Возраст: {2}  Рост: {1}м", name, height, age);\n\n             Console.ReadKey();\n        }\n    }\n}\n
text%№%Этот способ подразумевает, что первый параметр в методе Console.WriteLine представляет выводимую строку ("Имя: {0} Возраст: {2} Рост: {1}м"). Все последующие параметры представляют значения, которые могут быть встроенны в эту строку (name, height, age). При этом важен порядок подобных параметров. Например, в данном случае вначале идет name, потом height и потом age. Поэтому у name будет представлять параметр с номером 0 (нумерация начинается с нуля), height имеет номер 1, а age - номер 2. Поэтому в строке "Имя: {0} Возраст: {2} Рост: {1}м" на место плейсхолдеров {0}, {2}, {1} будут вставляться значения соответствующих параметров. \nКроме Console.WriteLine() можно также использовать метод Console.Write(), он работает точно так же за тем исключением, что не осуществляет переход на следующую строку.
page
text%№%Консольный ввод \n\nКроме вывода информации на консоль мы можем получать информацию с консоли. Для этого предназначен метод Console.ReadLine(). Он позволяет получить введенную строку.
code%№%using System;\n\n namespace HelloApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write("Введите свое имя: ");\n            string name = Console.ReadLine();\n            Console.WriteLine($"Привет {name}");\n\n             Console.ReadKey();\n        }\n    }\n}\n
text%№%В данном случае все, что вводит пользователь, с помощью метода Console.ReadLine передается в переменную name.
out%№%Введите свое имя: Том \nПривет Том
page
text%№%Таким образом мы можем вводить информацию через консоль. Однако минусом этого метода является то, что Console.ReadLine считывает информацию именно в виде строки. Поэтому мы можем по умолчанию присвоить ее только переменной типа string. Как нам быть, если, допустим, мы хотим ввести возраст в переменную типа int или другую информацию в переменные типа double или decimal? По умолчанию платформа .NET предоставляет ряд методов, которые позволяют преобразовать различные значения к типам int, double и т.д. Некоторые из этих методов: \n   •Convert.ToInt32() (преобразует к типу int) \n   •Convert.ToDouble() (преобразует к типу double) \n   •Convert.ToDecimal() (преобразует к типу decimal) \nПример ввода значений:
code%№%using System;\n\n namespace HelloApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write("Введите имя: ");\n            string name = Console.ReadLine();\n\n             Console.Write("Введите возраст: ");\n            int age = Convert.ToInt32(Console.ReadLine());\n\n             Console.Write("Введите рост: ");\n            double height = Convert.ToDouble(Console.ReadLine());\n\n             Console.Write("Введите размер зарплаты: ");\n            decimal salary = Convert.ToDecimal(Console.ReadLine());\n\n             Console.WriteLine($"Имя: {name}  Возраст: {age}  Рост: {height}м  Зарплата: {salary}$");\n\n             Console.ReadKey();\n        }\n    }\n}\n
text%№%При вводе важно учитывать текущую операционную систему. В одних культурах разделителем между целой и дробной частью является точка (США, Великобритания...), в других - запятая (Россия, Германия...). Например, если текущая ОС - русскоязычная, значит, надо вводить дробные числа с разделителем запятой. Если локализация англоязычная, значит, разделителем целой и дробной части при вводе будет точка.
out%№%Введите имя: Том \nВведите возраст: 25 \nВведите рост: 1,75 \nВведите размер зарплаты: 300,67 \nИмя: Том  Возраст: 25  Рост: 1,75м  Зарплата: 300,67$